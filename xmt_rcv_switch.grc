options:
  parameters:
    author: Barry Duggan
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Station control module
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: xmt_rcv_switch
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: xmt_rcv_switch
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 16.0]
    rotation: 0
    state: enabled

blocks:
- name: freq
  id: variable_qtgui_entry
  parameters:
    comment: 9,0,1,1
    entry_signal: editingFinished
    gui_hint: 9,0,1,1
    label: Receive Freq
    type: real
    value: 144.92e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 16.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: 1,0,1,3
    gui_hint: 1,0,1,3
    label: Rcv Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '76'
    value: '76'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 16.0]
    rotation: 0
    state: true
- name: offset
  id: variable_qtgui_chooser
  parameters:
    comment: 9,1,1,1
    gui_hint: 9,1,1,1
    label: Offset
    label0: '"-600kHz"'
    label1: '"0"'
    label2: '"+600kHz"'
    label3: ''
    label4: ''
    labels: '["-5MHz", "-600kHz", "0", "+600kHz", "+5MHz"]'
    num_opts: '0'
    option0: '-600000'
    option1: '0'
    option2: '600000'
    option3: '3'
    option4: '4'
    options: '[-5000000, -600000, 0, 600000, 5000000]'
    orient: Qt.QVBoxLayout
    type: int
    value: '0'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 16.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '768000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 16.0]
    rotation: 0
    state: enabled
- name: state
  id: variable_qtgui_toggle_button_msg
  parameters:
    comment: 10,2,1,1
    gui_hint: 10,2,1,1
    initPressed: 'False'
    label: Transmit
    outputmsgname: value
    pressBackgroundColor: red
    pressFontColor: black
    pressed: '1'
    relBackgroundColor: default
    relFontColor: black
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 624.0]
    rotation: 0
    state: true
- name: tx_freq
  id: variable
  parameters:
    comment: 'Calculated

      freq+offset'
    value: freq+offset
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 16.0]
    rotation: 0
    state: true
- name: tx_gain
  id: variable_qtgui_range
  parameters:
    comment: 2,0,1,3
    gui_hint: 2,0,1,3
    label: Tx gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.1'
    stop: '1.00'
    value: '0.5'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 16.0]
    rotation: 0
    state: true
- name: variable_qtgui_label_0
  id: variable_qtgui_label
  parameters:
    comment: 9,2,1,1
    formatter: None
    gui_hint: 9,2,1,1
    label: Transmit Freq
    type: real
    value: tx_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 16.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 376.0]
    rotation: 0
    state: disabled
- name: blocks_mute_xx_0
  id: blocks_mute_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mute: 'False'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 224.0]
    rotation: 0
    state: true
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 344.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTransmit / Receive Controller\n\"\"\"\n\nimport numpy as\
      \ np\nfrom gnuradio import gr\nimport time\nimport pmt\nimport math\n\n\"\"\"\
      \nState definitions\n    0   idle/rcv\n    1   start xmt\n    2   xmt active\n\
      \    3   send tx_eob\n\"\"\"\n\nclass blk(gr.basic_block):\n    \"\"\"\n   \
      \ reads input from a message port\n    generates control messages\n    \"\"\"\
      \n    def __init__(self):\n        gr.basic_block.__init__(self,\n         \
      \   name='XMT/RCV Control',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64])\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('rx_led'))\n        self.message_port_register_out(pmt.intern('ant_sw'))\n\
      \        self.message_port_register_out(pmt.intern('sw_cmd'))\n        self.message_port_register_out(pmt.intern('pa_sw'))\n\
      \        self.message_port_register_out(pmt.intern('rx_mute'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n        self.state = 0      # idle state\n        self.indx\
      \ = 0       # index for tags\n        self._debug = 0     # set to 1 to turn\
      \ on diagnostics\n        if (self._debug):\n            print (\"_debug =\"\
      , self._debug)\n        self.tag_flags = 1  # bit flags:\n                #\
      \ 1 - use tx_sob/tx_eob; \n                # 2 - use start tx_time; \n     \
      \           # 4 - use end tx_time\n        if (self.tag_flags > 0):\n      \
      \      print (\"tag_flags =\", self.tag_flags)\n\n    def handle_msg(self, msg):\n\
      \        try:\n            new_val = pmt.to_python(pmt.cdr(msg))\n        except\
      \ Exception as e:\n            gr.log.error(\"Error with message conversion:\
      \ %s\" % str(e))\n        if (self._debug):\n            print (\"new_val =\"\
      , new_val)\n        if (new_val == 1):\n\n            # (1) mute receive\n \
      \           if (self._debug):\n                print (\"t1\")\n            self.message_port_pub(pmt.intern('rx_mute'),\
      \ pmt.to_pmt(True))\n\n            # (2) turn off rcv LED\n            if (self._debug):\n\
      \                print (\"t2\")\n            self.message_port_pub(pmt.intern('rx_led'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(False)))\n\
      \n            # (3) send message to relay_sequencer\n            if (self._debug):\n\
      \                print (\"t3\")\n            self.message_port_pub(pmt.intern('sw_cmd'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_long(1)))\n\
      \n            # (4) turn on Antenna LED\n            if (self._debug):\n   \
      \             print (\"t4\")\n            self.message_port_pub(pmt.intern('ant_sw'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(True)))\n\
      \n        elif (new_val == 3):\n\n            # (10) turn on Amp LED\n     \
      \       if (self._debug):\n                print (\"t10\")\n            self.message_port_pub(pmt.intern('pa_sw'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(True)))\n\
      \n            # (11) send tx_sob (state 1)\n            self.state = 1     \
      \ # start xmt\n\n        elif (new_val == 0):\n\n            # (11) send tx_eob\
      \ (state 3)\n            self.state = 3      # stop xmt\n\n            # (10)\
      \ send message to relay_sequencer\n            if (self._debug):\n         \
      \       print (\"r10\")\n            self.message_port_pub(pmt.intern('sw_cmd'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_long(0)))\n\
      \n            # (9) turn off Amp LED\n            if (self._debug):\n      \
      \          print (\"r9\")\n            self.message_port_pub(pmt.intern('pa_sw'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(False)))\n\
      \n        elif (new_val == 2):\n\n            # (4) turn off Antenna LED\n \
      \           if (self._debug):\n                print (\"r4\")\n            self.message_port_pub(pmt.intern('ant_sw'),\n\
      \                pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(False)))\n\
      \n            #     set state 0\n            self.state = 0\n\n            #\
      \ (2) turn on rcv LED\n            if (self._debug):\n                print\
      \ (\"r2\")\n            self.message_port_pub(pmt.intern('rx_led'),\n      \
      \          pmt.cons(pmt.intern('pressed'),\n                pmt.from_bool(True)))\n\
      \n            # (1) unmute receive\n            if (self._debug):\n        \
      \        print (\"r1\")\n            self.message_port_pub(pmt.intern('rx_mute'),\
      \ pmt.to_pmt(False))\n\n    def general_work(self, input_items, output_items):\n\
      \        #buffer references\n        in0 = input_items[0][:len(output_items[0])]\n\
      \        out = output_items[0]\n\n        if (self.state == 0):\n          \
      \  o_len = 0\n\n        elif (self.state == 1):\n            if (self._debug):\n\
      \                print (\"state = 1\", self.indx)\n\n            if (self.tag_flags\
      \ & 1):\n                key1 = pmt.intern(\"tx_sob\")\n                val1\
      \ = pmt.PMT_T\n                self.add_item_tag(0, # Write to output port 0\n\
      \                    self.indx,   # Index of the tag\n                    key1,\
      \   # Key of the tag\n                    val1    # Value of the tag\n     \
      \               )\n\n            if (self.tag_flags & 2):\n                now\
      \ = time.time()\n                t_tag = now         # + 0.010\n           \
      \     t_sec = (int)(math.floor(t_tag))\n                t_frac = t_tag - t_sec\n\
      \                key2 = pmt.intern(\"tx_time\")\n                val2 = pmt.to_pmt((t_sec,\
      \ t_frac))\n                self.add_item_tag(0, # Write to output port 0\n\
      \                    self.indx,   # Index of the tag\n                    key2,\
      \   # Key of the tag\n                    val2    # Value of the tag\n     \
      \               )\n\n            out[:] = in0    # pass thru\n            o_len\
      \ = len(output_items[0])\n            self.indx += o_len\n            self.state\
      \ = 2      # xmt active\n\n        elif (self.state == 2):\n            out[:]\
      \ = in0    # pass thru\n            o_len = len(output_items[0])\n         \
      \   self.indx += o_len\n\n        elif (self.state == 3):\n            if (self._debug):\n\
      \                print (\"state = 3\", self.indx)\n\n            out[:] = in0\
      \    # pass thru\n            o_len = len(output_items[0])\n            self.indx\
      \ += o_len\n\n            if (self.tag_flags & 1):\n                key1 = pmt.intern(\"\
      tx_eob\")\n                val1 = pmt.PMT_T\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    (self.indx-1),   # Index of\
      \ the tag\n                    key1,   # Key of the tag\n                  \
      \  val1    # Value of the tag\n                    )\n\n            if (self.tag_flags\
      \ & 4):\n                now = time.time()\n                t_tag = now    \
      \     # + 0.010\n                t_sec = (int)(math.floor(t_tag))\n        \
      \        t_frac = t_tag - t_sec\n                key2 = pmt.intern(\"tx_time\"\
      )\n                val2 = pmt.to_pmt((t_sec, t_frac))\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    (self.indx-1),   # Index of\
      \ the tag\n                    key2,   # Key of the tag\n                  \
      \  val2    # Value of the tag\n                    )\n\n            self.state\
      \ = 0      # stop sending data\n\n        #consume the inputs\n        self.consume(0,\
      \ len(in0))   # consume port 0 input\n\n        #return produced\n        return\
      \ (o_len)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('XMT/RCV Control', 'blk', [], [('0', 'complex', 1), ('msg_in', 'message',
      1)], [('0', 'complex', 1), ('rx_mute', 'message', 1), ('pa_sw', 'message', 1),
      ('sw_cmd', 'message', 1), ('ant_sw', 'message', 1), ('rx_led', 'message', 1)],
      '\n    reads input from a message port\n    generates control messages\n    ',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 424.0]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '5000'
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: '1000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 364.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: Numbers below GUI blocks are the GUI hints
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 136.0]
    rotation: 0
    state: enabled
- name: qtgui_ledindicator_0
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '2'
    comment: ''
    gui_hint: 0,1,1,1
    label: '"Antenna"'
    maxSize: '40'
    offColor: lime
    onColor: yellow
    position: '1'
    state: 'False'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 616.0]
    rotation: 0
    state: true
- name: qtgui_ledindicator_1
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '2'
    comment: ''
    gui_hint: 0,2,1,1
    label: '"Power Amp"'
    maxSize: '40'
    offColor: gray
    onColor: red
    position: '1'
    state: 'False'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 472.0]
    rotation: 0
    state: true
- name: qtgui_ledindicator_2
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '2'
    comment: ''
    gui_hint: 0,0,1,1
    label: '"Receive"'
    maxSize: '40'
    offColor: gray
    onColor: lime
    position: '1'
    state: 'True'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 688.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: '24000'
    comment: 3,0,1,3
    fc: '0'
    fftsize: '1024'
    gui_hint: 3,0,1,3
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 536.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '32'
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 544.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: TX/RX
    ant10: TX/RX
    ant11: TX/RX
    ant12: TX/RX
    ant13: TX/RX
    ant14: TX/RX
    ant15: TX/RX
    ant16: TX/RX
    ant17: TX/RX
    ant18: TX/RX
    ant19: TX/RX
    ant2: TX/RX
    ant20: TX/RX
    ant21: TX/RX
    ant22: TX/RX
    ant23: TX/RX
    ant24: TX/RX
    ant25: TX/RX
    ant26: TX/RX
    ant27: TX/RX
    ant28: TX/RX
    ant29: TX/RX
    ant3: TX/RX
    ant30: TX/RX
    ant31: TX/RX
    ant4: TX/RX
    ant5: TX/RX
    ant6: TX/RX
    ant7: TX/RX
    ant8: TX/RX
    ant9: TX/RX
    bw0: '200000'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: uhd.tune_request(tx_freq, 300000)
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 30.72e6
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '"send_frame_size=4096"'
    dev_args: '""'
    gain0: tx_gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: normalized
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 332.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX2
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: uhd.tune_request(freq, 180000)
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 30.72e6
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: ''
    dev_args: '"recv_buff_size=12288,recv_frame_size=1544"'
    gain0: gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Disabled
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 172.0]
    rotation: 0
    state: enabled
- name: zeromq_pub_msg_sink_0
  id: zeromq_pub_msg_sink
  parameters:
    address: tcp://127.0.0.1:49202
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 544.0]
    rotation: 0
    state: true
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:49201
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    drop_on_hwm: 'True'
    hwm: '-1'
    key: ''
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 200.0]
    rotation: 0
    state: true
- name: zeromq_sub_msg_source_0
  id: zeromq_sub_msg_source
  parameters:
    address: tcp://127.0.0.1:49204
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 544.0]
    rotation: 0
    state: true
- name: zeromq_sub_source_0
  id: zeromq_sub_source
  parameters:
    address: tcp://127.0.0.1:49203
    affinity: ''
    alias: ''
    bind: 'False'
    comment: USRP sample rate = 768kHz
    hwm: '-1'
    key: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 392.0]
    rotation: 0
    state: true

connections:
- [blocks_mute_xx_0, '0', zeromq_pub_sink_0, '0']
- [epy_block_0, '0', blocks_tag_debug_0, '0']
- [epy_block_0, '0', low_pass_filter_0, '0']
- [epy_block_0, ant_sw, qtgui_ledindicator_0, state]
- [epy_block_0, pa_sw, qtgui_ledindicator_1, state]
- [epy_block_0, rx_led, qtgui_ledindicator_2, state]
- [epy_block_0, rx_mute, blocks_mute_xx_0, set_mute]
- [epy_block_0, sw_cmd, zeromq_pub_msg_sink_0, in]
- [low_pass_filter_0, '0', rational_resampler_xxx_0, '0']
- [low_pass_filter_0, '0', uhd_usrp_sink_0, '0']
- [rational_resampler_xxx_0, '0', qtgui_sink_x_0, '0']
- [state, state, epy_block_0, msg_in]
- [uhd_usrp_sink_0, async_msgs, blocks_message_debug_0, print]
- [uhd_usrp_source_0, '0', blocks_mute_xx_0, '0']
- [zeromq_sub_msg_source_0, out, epy_block_0, msg_in]
- [zeromq_sub_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.11.0-rc1
